{"version":3,"sources":["components/Info/Info.jsx","components/Form/Form.jsx","components/Error/Error.jsx","components/Loading/Loading.jsx","components/Weather/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Error","state","display","onClick","e","setState","className","this","role","data-dismiss","aria-label","aria-hidden","React","Component","Loading","Weather","temp","city","country","pressure","sunset","isError","isLoading","API_KEY","COEFF_TEMP","App","gettingWeather","event","target","elements","value","fetch","then","response","json","data","main","sys","displayTime","catch","preventDefault","time","date","Date","setTime","getHours","getMinutes","getSeconds","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MAEaA,EAAO,kBAEhB,6BACI,2CACA,qDCJKC,EAAQ,SAAAC,GAAK,OAEtB,0BAAMC,SAAUD,EAAME,eAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,iDCJKC,G,MAAb,2MAEIC,MAAQ,CACJC,QAAS,WAHjB,EAMIC,QAAU,SAACC,GACP,EAAKC,SAAS,CAACH,QAAS,YAPhC,wEAWQ,OACI,yBAAKI,UAAW,2CAA6CC,KAAKN,MAAMC,QAASM,KAAK,SAClF,mDACA,0BAAMF,UAAU,WAAhB,+CACA,4BAAQT,KAAK,SAASS,UAAU,QAAQG,eAAa,QAAQC,aAAW,QAAQP,QAASI,KAAKJ,SAC1F,0BAAMQ,cAAY,QAAlB,cAhBpB,GAA2BC,IAAMC,YCApBC,EAAU,kBACnB,yBAAKR,UAAU,eAAeE,KAAK,UAC/B,0BAAMF,UAAU,WAAhB,gBCAKS,EAAU,SAAArB,GAAU,IAErBsB,EAA8DtB,EAA9DsB,KAAMC,EAAwDvB,EAAxDuB,KAAMC,EAAkDxB,EAAlDwB,QAASC,EAAyCzB,EAAzCyB,SAAUC,EAA+B1B,EAA/B0B,OAAQC,EAAuB3B,EAAvB2B,QAASC,EAAc5B,EAAd4B,UAExD,OAAID,EAAgB,kBAAC,EAAD,MAEhBC,EAAkB,kBAAC,EAAD,MAGlB,yBAAKhB,UAAU,aACTW,GACE,6BACI,wCAAa,8BAAOA,EAAP,KAAeC,IAC5B,2CAAgB,8BAAOF,IACvB,wCAAa,8BAAOG,IACpB,sCAAW,8BAAOC,OCbhCG,EAAU,mCACVC,EAAa,OAoEJC,E,2MAhEbxB,MAAQ,CACNe,KAAM,KACNC,KAAM,KACNC,QAAS,KACTC,SAAU,KACVC,OAAQ,KACRC,SAAS,EACTC,WAAW,G,EAGbI,eAAiB,SAACC,GAChB,IAAMV,EAAOU,EAAMC,OAAOC,SAASZ,KAAKa,MACxC,EAAKzB,SAAS,CAACiB,WAAW,IAEvBL,EACDc,MAAM,qDAAD,OAAsDd,EAAtD,kBAAoEM,IACpES,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAK9B,SAAS,CAC1BiB,WAAW,EACXD,SAAS,EACTL,KAAMmB,EAAKC,KAAKpB,KAAOQ,EACvBP,KAAMkB,EAAKrC,KACXoB,QAASiB,EAAKE,IAAInB,QAClBC,SAAUgB,EAAKC,KAAKjB,SACpBC,OAAQ,EAAKkB,YAAYH,EAAKE,IAAIjB,aAEnCmB,OAAM,kBAAM,EAAKlC,SAAS,CAACiB,WAAW,EAAOD,SAAS,OAEzD,EAAKhB,SAAS,CAACgB,SAAS,IAG5BM,EAAMa,kB,EAGRF,YAAc,SAACG,GACb,IAAIC,EAAO,IAAIC,KAIf,OAHAD,EAAKE,QAAQH,GACOC,EAAKG,WAAa,IAAMH,EAAKI,aAAe,IAAMJ,EAAKK,c,wEAM3E,OACI,yBAAKzC,UAAU,YACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAMV,cAAeW,KAAKmB,iBAC1B,kBAAC,EAAYnB,KAAKN,gB,GAvD5BW,IAAMC,W,MCGJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.6b41cdfe.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Info = () => (\r\n\r\n    <div>\r\n        <h2>Weather App</h2>\r\n        <p>Weather in your city</p>\r\n    </div>\r\n)","import React from \"react\";\r\n\r\nexport const Form  = props =>  (\r\n\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n        <button>Get Weather</button>\r\n    </form>\r\n);","import React from \"react\";\r\n\r\nexport class Error extends React.Component {\r\n\r\n    state = {\r\n        display: \"d-block\"\r\n    };\r\n\r\n    onClick = (e) => {\r\n        this.setState({display: \"d-none\"});\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className={\"alert alert-dismissible fade show error \" + this.state.display} role=\"alert\">\r\n                <strong>Holy guacamole!</strong>\r\n                <span className=\"message\">Sorry! There was an error loading the items</span>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick={this.onClick}>\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n};","import React from \"react\";\r\n\r\nexport const Loading = () => (\r\n    <div className=\"spinner-grow\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Error } from \"../Error\";\r\nimport { Loading } from \"../Loading\";\r\n\r\nexport const Weather = props => {\r\n\r\n    const { temp, city, country, pressure, sunset, isError, isLoading } = props;\r\n\r\n    if (isError) return <Error />;\r\n\r\n    if (isLoading) return <Loading />;\r\n\r\n    return(\r\n        <div className=\"infoWeath\">\r\n            { city &&\r\n                <div>\r\n                    <p>Location: <span>{city}, {country}</span></p>\r\n                    <p>Temperature: <span>{temp}</span></p>\r\n                    <p>Pressure: <span>{pressure}</span></p>\r\n                    <p>Sunset: <span>{sunset}</span></p>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport { Info } from \"./components/Info\";\r\nimport { Form } from \"./components/Form\";\r\nimport { Weather } from \"./components/Weather/Weather\";\r\n\r\nconst API_KEY = \"65fe616273c44b49ca4e30b569dc907b\";\r\nconst COEFF_TEMP = 273.15;\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    temp: null,\r\n    city: null,\r\n    country: null,\r\n    pressure: null,\r\n    sunset: null,\r\n    isError: false,\r\n    isLoading: false\r\n  };\r\n\r\n  gettingWeather = (event) => {\r\n    const city = event.target.elements.city.value;\r\n    this.setState({isLoading: true});\r\n\r\n    if(city) {\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`)\r\n          .then(response => response.json())\r\n          .then(data => this.setState({\r\n            isLoading: false,\r\n            isError: false,\r\n            temp: data.main.temp - COEFF_TEMP,\r\n            city: data.name,\r\n            country: data.sys.country,\r\n            pressure: data.main.pressure,\r\n            sunset: this.displayTime(data.sys.sunset),\r\n          }))\r\n          .catch(() => this.setState({isLoading: false, isError: true}));\r\n    } else {\r\n        this.setState({isError: true});\r\n    }\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  displayTime = (time) => {\r\n    let date = new Date();\r\n    date.setTime(time);\r\n    let convertedTime = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n\r\n    return convertedTime;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"wrapper \">\r\n            <div className=\"main\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-5 info\">\r\n                            <Info />\r\n                        </div>\r\n                        <div className=\"col-sm-7 form\">\r\n                            <Form weatherMethod={this.gettingWeather} />\r\n                            <Weather {...this.state}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}